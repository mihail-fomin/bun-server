import { Elysia, t } from 'elysia'
import { cors } from "@elysiajs/cors";
import { Database } from "bun:sqlite";

interface UpdateResult {
  affectedRows: number;
}

const DB = new Database("mydb.sqlite", { create: true });

DB.query(
  `CREATE TABLE IF NOT EXISTS MESSAGES(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    message TEXT
    );`
).run();

const PORT = Bun.env.PORT || 8000;

const app = new Elysia()
app.use(cors());



app.get("/", (context) => {
  const query = DB.query(`SELECT * FROM MESSAGES;`);
  const result = query.all();
  console.log(result);
  context.set.status = 200;

  return new Response(JSON.stringify({ messages: result }), {
    headers: { "Content-Type": "application/json" },
  });
});

app.post(
  "/add",
  ({ body }) => {
    const message = body?.message;
    console.log(message);
    const query = DB.query(`INSERT INTO MESSAGES (message) VALUES (?1)`);
    query.run(message);
    return new Response(JSON.stringify({ message: "Added" }), {
      headers: { "Content-Type": "application/json" },
    });
  },
  {
    body: t.Object({
      message: t.String(),
    })
  });

app.put(
  "/edit/:id", // :id - —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  ({ body, params }) => {
    const id = params.id; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const message = body.message;

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const updateQuery = DB.query("UPDATE MESSAGES SET message = ?1 WHERE id = ?2");
      updateQuery.run(message, id);

      // –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      const countQuery = DB.query("SELECT changes() AS affectedRows");
      const result = countQuery.get() as UpdateResult

      if (result && result.affectedRows > 0) {
        return new Response(JSON.stringify({ message: "Updated" }), {
          headers: { "Content-Type": "application/json" },
        });
      } else {
        return new Response(JSON.stringify({ message: "Not Found" }), {
          headers: { "Content-Type": "application/json" },
          status: 404,
        });
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
      return new Response(JSON.stringify({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" }), {
        headers: { "Content-Type": "application/json" },
        status: 500,
      });
    }
  },
  {
    body: t.Object({
      message: t.String(),
    })
  }
);

app.delete(
  "/delete/:id", // :id - —ç—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  ({ params }) => {
    const id = params.id; // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ id
      const deleteQuery = DB.query("DELETE FROM MESSAGES WHERE id = ?1");
      deleteQuery.run(id); // –í—ã–ø–æ–ª–Ω–∏—Ç–µ DELETE-–∑–∞–ø—Ä–æ—Å

      // –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
      const countQuery = DB.query("SELECT changes() AS affectedRows");
      const result = countQuery.get() as UpdateResult

      if (result && result.affectedRows > 0) {
        return new Response(JSON.stringify({ message: "Deleted" }), {
          headers: { "Content-Type": "application/json" },
        });
      } else {
        return new Response(JSON.stringify({ message: "Not Found" }), {
          headers: { "Content-Type": "application/json" },
          status: 404,
        });
      }
    } catch (error) {
      console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
      return new Response(JSON.stringify({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" }), {
        headers: { "Content-Type": "application/json" },
        status: 500,
      });
    }

  })

app.listen(Number(PORT));

console.log(`ü¶ä Elysia is running at on port ${app.server?.port}...`)
